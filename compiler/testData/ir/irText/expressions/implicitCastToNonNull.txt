FILE fqName:<root> fileName:/implicitCastToNonNull.kt
  FUN name:test1 visibility:public modality:FINAL <> (x:kotlin.String?) returnType:kotlin.Int flags:[]
    VALUE_PARAMETER name:x index:0 type:kotlin.String? flags:[]
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='FUN name:test1 visibility:public modality:FINAL <> (x:kotlin.String?) returnType:kotlin.Int flags:[]'
        WHEN type=kotlin.Int origin=IF
          BRANCH
            if: CALL 'FUN IR_BUILTINS_STUB name:EQEQ visibility:public modality:FINAL <> (arg0:kotlin.Any?, arg1:kotlin.Any?) returnType:kotlin.Boolean flags:[]' type=kotlin.Boolean origin=EQEQ
              arg0: GET_VAR 'VALUE_PARAMETER name:x index:0 type:kotlin.String? flags:[]' type=kotlin.String? origin=null
              arg1: CONST Null type=kotlin.Nothing? value=null
            then: CONST Int type=kotlin.Int value=0
          BRANCH
            if: CONST Boolean type=kotlin.Boolean value=true
            then: CALL 'FUN IR_EXTERNAL_DECLARATION_STUB name:<get-length> visibility:public modality:OPEN <> ($this:kotlin.String) returnType:kotlin.Int flags:[]' type=kotlin.Int origin=GET_PROPERTY
              $this: GET_VAR 'VALUE_PARAMETER name:x index:0 type:kotlin.String? flags:[]' type=kotlin.String? origin=null
  FUN name:test2 visibility:public modality:FINAL <T> (x:<root>.test2.T) returnType:kotlin.Int flags:[]
    TYPE_PARAMETER name:T index:0 variance: superTypes:[kotlin.CharSequence?]
    VALUE_PARAMETER name:x index:0 type:<root>.test2.T flags:[]
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='FUN name:test2 visibility:public modality:FINAL <T> (x:<root>.test2.T) returnType:kotlin.Int flags:[]'
        WHEN type=kotlin.Int origin=IF
          BRANCH
            if: CALL 'FUN IR_BUILTINS_STUB name:EQEQ visibility:public modality:FINAL <> (arg0:kotlin.Any?, arg1:kotlin.Any?) returnType:kotlin.Boolean flags:[]' type=kotlin.Boolean origin=EQEQ
              arg0: GET_VAR 'VALUE_PARAMETER name:x index:0 type:<root>.test2.T flags:[]' type=<root>.test2.T origin=null
              arg1: CONST Null type=kotlin.Nothing? value=null
            then: CONST Int type=kotlin.Int value=0
          BRANCH
            if: CONST Boolean type=kotlin.Boolean value=true
            then: CALL 'FUN IR_EXTERNAL_DECLARATION_STUB name:<get-length> visibility:public modality:ABSTRACT <> ($this:kotlin.CharSequence) returnType:kotlin.Int flags:[]' type=kotlin.Int origin=GET_PROPERTY
              $this: GET_VAR 'VALUE_PARAMETER name:x index:0 type:<root>.test2.T flags:[]' type=<root>.test2.T origin=null
  FUN name:test3 visibility:public modality:FINAL <T> (x:kotlin.Any) returnType:kotlin.Int flags:[inline]
    TYPE_PARAMETER name:T index:0 variance: superTypes:[kotlin.CharSequence?]
    VALUE_PARAMETER name:x index:0 type:kotlin.Any flags:[]
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='FUN name:test3 visibility:public modality:FINAL <T> (x:kotlin.Any) returnType:kotlin.Int flags:[inline]'
        WHEN type=kotlin.Int origin=IF
          BRANCH
            if: TYPE_OP type=kotlin.Boolean origin=NOT_INSTANCEOF typeOperand=<root>.test3.T
              typeOperand: TYPE_PARAMETER name:T index:0 variance: superTypes:[kotlin.CharSequence?]
              GET_VAR 'VALUE_PARAMETER name:x index:0 type:kotlin.Any flags:[]' type=kotlin.Any origin=null
            then: CONST Int type=kotlin.Int value=0
          BRANCH
            if: CONST Boolean type=kotlin.Boolean value=true
            then: CALL 'FUN IR_EXTERNAL_DECLARATION_STUB name:<get-length> visibility:public modality:ABSTRACT <> ($this:kotlin.CharSequence) returnType:kotlin.Int flags:[]' type=kotlin.Int origin=GET_PROPERTY
              $this: TYPE_OP type=kotlin.CharSequence origin=IMPLICIT_CAST typeOperand=kotlin.CharSequence
                typeOperand: CLASS IR_EXTERNAL_DECLARATION_STUB INTERFACE name:CharSequence modality:ABSTRACT visibility:public flags:[] superTypes:[kotlin.Any]
                GET_VAR 'VALUE_PARAMETER name:x index:0 type:kotlin.Any flags:[]' type=kotlin.Any origin=null
  FUN name:test4 visibility:public modality:FINAL <T> (x:kotlin.Any?) returnType:kotlin.Int flags:[inline]
    TYPE_PARAMETER name:T index:0 variance: superTypes:[kotlin.CharSequence]
    VALUE_PARAMETER name:x index:0 type:kotlin.Any? flags:[]
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='FUN name:test4 visibility:public modality:FINAL <T> (x:kotlin.Any?) returnType:kotlin.Int flags:[inline]'
        WHEN type=kotlin.Int origin=IF
          BRANCH
            if: TYPE_OP type=kotlin.Boolean origin=NOT_INSTANCEOF typeOperand=<root>.test4.T
              typeOperand: TYPE_PARAMETER name:T index:0 variance: superTypes:[kotlin.CharSequence]
              GET_VAR 'VALUE_PARAMETER name:x index:0 type:kotlin.Any? flags:[]' type=kotlin.Any? origin=null
            then: CONST Int type=kotlin.Int value=0
          BRANCH
            if: CONST Boolean type=kotlin.Boolean value=true
            then: CALL 'FUN IR_EXTERNAL_DECLARATION_STUB name:<get-length> visibility:public modality:ABSTRACT <> ($this:kotlin.CharSequence) returnType:kotlin.Int flags:[]' type=kotlin.Int origin=GET_PROPERTY
              $this: TYPE_OP type=kotlin.CharSequence origin=IMPLICIT_CAST typeOperand=kotlin.CharSequence
                typeOperand: CLASS IR_EXTERNAL_DECLARATION_STUB INTERFACE name:CharSequence modality:ABSTRACT visibility:public flags:[] superTypes:[kotlin.Any]
                GET_VAR 'VALUE_PARAMETER name:x index:0 type:kotlin.Any? flags:[]' type=kotlin.Any? origin=null
  FUN name:test5 visibility:public modality:FINAL <T, S> (x:<root>.test5.T, fn:kotlin.Function1<<root>.test5.S, kotlin.Unit>) returnType:kotlin.Unit flags:[]
    TYPE_PARAMETER name:T index:0 variance: superTypes:[<root>.test5.S?]
    TYPE_PARAMETER name:S index:1 variance: superTypes:[kotlin.Any?]
    VALUE_PARAMETER name:x index:0 type:<root>.test5.T flags:[]
    VALUE_PARAMETER name:fn index:1 type:kotlin.Function1<<root>.test5.S, kotlin.Unit> flags:[]
    BLOCK_BODY
      WHEN type=kotlin.Unit origin=IF
        BRANCH
          if: CALL 'FUN IR_BUILTINS_STUB name:NOT visibility:public modality:FINAL <> (arg0:kotlin.Boolean) returnType:kotlin.Boolean flags:[]' type=kotlin.Boolean origin=EXCLEQ
            arg0: CALL 'FUN IR_BUILTINS_STUB name:EQEQ visibility:public modality:FINAL <> (arg0:kotlin.Any?, arg1:kotlin.Any?) returnType:kotlin.Boolean flags:[]' type=kotlin.Boolean origin=EXCLEQ
              arg0: GET_VAR 'VALUE_PARAMETER name:x index:0 type:<root>.test5.T flags:[]' type=<root>.test5.T origin=null
              arg1: CONST Null type=kotlin.Nothing? value=null
          then: CALL 'FUN IR_EXTERNAL_DECLARATION_STUB name:invoke visibility:public modality:ABSTRACT <> ($this:kotlin.Function1<kotlin.Function1.P1, kotlin.Function1.R>, p1:kotlin.Function1.P1) returnType:kotlin.Function1.R flags:[]' type=kotlin.Unit origin=INVOKE
            $this: GET_VAR 'VALUE_PARAMETER name:fn index:1 type:kotlin.Function1<<root>.test5.S, kotlin.Unit> flags:[]' type=kotlin.Function1<<root>.test5.S, kotlin.Unit> origin=VARIABLE_AS_FUNCTION
            p1: GET_VAR 'VALUE_PARAMETER name:x index:0 type:<root>.test5.T flags:[]' type=<root>.test5.T origin=null
